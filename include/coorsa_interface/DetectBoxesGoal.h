// Generated by gencpp from file coorsa_interface/DetectBoxesGoal.msg
// DO NOT EDIT!


#ifndef COORSA_INTERFACE_MESSAGE_DETECTBOXESGOAL_H
#define COORSA_INTERFACE_MESSAGE_DETECTBOXESGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace coorsa_interface
{
template <class ContainerAllocator>
struct DetectBoxesGoal_
{
  typedef DetectBoxesGoal_<ContainerAllocator> Type;

  DetectBoxesGoal_()
    : box_dimensions()
    , plane_vertical_offset(0.0)
    , plane_coefficients()  {
      plane_coefficients.assign(0.0);
  }
  DetectBoxesGoal_(const ContainerAllocator& _alloc)
    : box_dimensions(_alloc)
    , plane_vertical_offset(0.0)
    , plane_coefficients()  {
  (void)_alloc;
      plane_coefficients.assign(0.0);
  }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _box_dimensions_type;
  _box_dimensions_type box_dimensions;

   typedef double _plane_vertical_offset_type;
  _plane_vertical_offset_type plane_vertical_offset;

   typedef boost::array<double, 4>  _plane_coefficients_type;
  _plane_coefficients_type plane_coefficients;





  typedef boost::shared_ptr< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> const> ConstPtr;

}; // struct DetectBoxesGoal_

typedef ::coorsa_interface::DetectBoxesGoal_<std::allocator<void> > DetectBoxesGoal;

typedef boost::shared_ptr< ::coorsa_interface::DetectBoxesGoal > DetectBoxesGoalPtr;
typedef boost::shared_ptr< ::coorsa_interface::DetectBoxesGoal const> DetectBoxesGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator1> & lhs, const ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator2> & rhs)
{
  return lhs.box_dimensions == rhs.box_dimensions &&
    lhs.plane_vertical_offset == rhs.plane_vertical_offset &&
    lhs.plane_coefficients == rhs.plane_coefficients;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator1> & lhs, const ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coorsa_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9da0d1786c935c65d9fdd9a1e6f41ff6";
  }

  static const char* value(const ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9da0d1786c935c65ULL;
  static const uint64_t static_value2 = 0xd9fdd9a1e6f41ff6ULL;
};

template<class ContainerAllocator>
struct DataType< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coorsa_interface/DetectBoxesGoal";
  }

  static const char* value(const ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"geometry_msgs/Vector3 box_dimensions\n"
"float64 plane_vertical_offset\n"
"float64[4] plane_coefficients # nx ny nz d\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.box_dimensions);
      stream.next(m.plane_vertical_offset);
      stream.next(m.plane_coefficients);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectBoxesGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coorsa_interface::DetectBoxesGoal_<ContainerAllocator>& v)
  {
    s << indent << "box_dimensions: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.box_dimensions);
    s << indent << "plane_vertical_offset: ";
    Printer<double>::stream(s, indent + "  ", v.plane_vertical_offset);
    s << indent << "plane_coefficients[]" << std::endl;
    for (size_t i = 0; i < v.plane_coefficients.size(); ++i)
    {
      s << indent << "  plane_coefficients[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.plane_coefficients[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORSA_INTERFACE_MESSAGE_DETECTBOXESGOAL_H
