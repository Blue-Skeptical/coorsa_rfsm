// Generated by gencpp from file coorsa_interface/DetectPlanesGoal.msg
// DO NOT EDIT!


#ifndef COORSA_INTERFACE_MESSAGE_DETECTPLANESGOAL_H
#define COORSA_INTERFACE_MESSAGE_DETECTPLANESGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace coorsa_interface
{
template <class ContainerAllocator>
struct DetectPlanesGoal_
{
  typedef DetectPlanesGoal_<ContainerAllocator> Type;

  DetectPlanesGoal_()
    : num_planes(0)  {
    }
  DetectPlanesGoal_(const ContainerAllocator& _alloc)
    : num_planes(0)  {
  (void)_alloc;
    }



   typedef uint32_t _num_planes_type;
  _num_planes_type num_planes;





  typedef boost::shared_ptr< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> const> ConstPtr;

}; // struct DetectPlanesGoal_

typedef ::coorsa_interface::DetectPlanesGoal_<std::allocator<void> > DetectPlanesGoal;

typedef boost::shared_ptr< ::coorsa_interface::DetectPlanesGoal > DetectPlanesGoalPtr;
typedef boost::shared_ptr< ::coorsa_interface::DetectPlanesGoal const> DetectPlanesGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator1> & lhs, const ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator2> & rhs)
{
  return lhs.num_planes == rhs.num_planes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator1> & lhs, const ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coorsa_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd56a95b04cf0e7f83e3bde93a42be01";
  }

  static const char* value(const ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd56a95b04cf0e7fULL;
  static const uint64_t static_value2 = 0x83e3bde93a42be01ULL;
};

template<class ContainerAllocator>
struct DataType< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coorsa_interface/DetectPlanesGoal";
  }

  static const char* value(const ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"uint32 num_planes\n"
;
  }

  static const char* value(const ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.num_planes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectPlanesGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coorsa_interface::DetectPlanesGoal_<ContainerAllocator>& v)
  {
    s << indent << "num_planes: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.num_planes);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORSA_INTERFACE_MESSAGE_DETECTPLANESGOAL_H
