// Generated by gencpp from file coorsa_interface/EvaluatePlanGoal.msg
// DO NOT EDIT!


#ifndef COORSA_INTERFACE_MESSAGE_EVALUATEPLANGOAL_H
#define COORSA_INTERFACE_MESSAGE_EVALUATEPLANGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace coorsa_interface
{
template <class ContainerAllocator>
struct EvaluatePlanGoal_
{
  typedef EvaluatePlanGoal_<ContainerAllocator> Type;

  EvaluatePlanGoal_()
    : box_poses()  {
    }
  EvaluatePlanGoal_(const ContainerAllocator& _alloc)
    : box_poses(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _box_poses_type;
  _box_poses_type box_poses;





  typedef boost::shared_ptr< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> const> ConstPtr;

}; // struct EvaluatePlanGoal_

typedef ::coorsa_interface::EvaluatePlanGoal_<std::allocator<void> > EvaluatePlanGoal;

typedef boost::shared_ptr< ::coorsa_interface::EvaluatePlanGoal > EvaluatePlanGoalPtr;
typedef boost::shared_ptr< ::coorsa_interface::EvaluatePlanGoal const> EvaluatePlanGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator1> & lhs, const ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator2> & rhs)
{
  return lhs.box_poses == rhs.box_poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator1> & lhs, const ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coorsa_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "23f2839d10b86703980a3373654f876b";
  }

  static const char* value(const ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x23f2839d10b86703ULL;
  static const uint64_t static_value2 = 0x980a3373654f876bULL;
};

template<class ContainerAllocator>
struct DataType< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coorsa_interface/EvaluatePlanGoal";
  }

  static const char* value(const ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Define the goal\n"
"geometry_msgs/Pose[] box_poses\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.box_poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EvaluatePlanGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coorsa_interface::EvaluatePlanGoal_<ContainerAllocator>& v)
  {
    s << indent << "box_poses[]" << std::endl;
    for (size_t i = 0; i < v.box_poses.size(); ++i)
    {
      s << indent << "  box_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.box_poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORSA_INTERFACE_MESSAGE_EVALUATEPLANGOAL_H
